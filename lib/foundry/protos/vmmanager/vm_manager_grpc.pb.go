// Code generated by protoc-gen-go-grpc. DO NOT EDIT.

package vmmanager

import (
	context "context"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
// Requires gRPC-Go v1.32.0 or later.
const _ = grpc.SupportPackageIsVersion7

// VMFoundryClient is the client API for VMFoundry service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type VMFoundryClient interface {
	CreateCluster(ctx context.Context, in *ClusterRequest, opts ...grpc.CallOption) (*ClusterResponse, error)
	DeleteCluster(ctx context.Context, in *ClusterID, opts ...grpc.CallOption) (*StatusResponse, error)
	StartCluster(ctx context.Context, in *ClusterID, opts ...grpc.CallOption) (*StatusResponse, error)
	StopCluster(ctx context.Context, in *ClusterID, opts ...grpc.CallOption) (*StatusResponse, error)
	StartVM(ctx context.Context, in *VMID, opts ...grpc.CallOption) (*StatusResponse, error)
	StopVM(ctx context.Context, in *VMID, opts ...grpc.CallOption) (*StatusResponse, error)
	ClusterInfo(ctx context.Context, in *ClusterID, opts ...grpc.CallOption) (*ClusterResponse, error)
	VMInfo(ctx context.Context, in *VMID, opts ...grpc.CallOption) (*VMResponse, error)
}

type vMFoundryClient struct {
	cc grpc.ClientConnInterface
}

func NewVMFoundryClient(cc grpc.ClientConnInterface) VMFoundryClient {
	return &vMFoundryClient{cc}
}

func (c *vMFoundryClient) CreateCluster(ctx context.Context, in *ClusterRequest, opts ...grpc.CallOption) (*ClusterResponse, error) {
	out := new(ClusterResponse)
	err := c.cc.Invoke(ctx, "/vmmanager.VMFoundry/CreateCluster", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *vMFoundryClient) DeleteCluster(ctx context.Context, in *ClusterID, opts ...grpc.CallOption) (*StatusResponse, error) {
	out := new(StatusResponse)
	err := c.cc.Invoke(ctx, "/vmmanager.VMFoundry/DeleteCluster", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *vMFoundryClient) StartCluster(ctx context.Context, in *ClusterID, opts ...grpc.CallOption) (*StatusResponse, error) {
	out := new(StatusResponse)
	err := c.cc.Invoke(ctx, "/vmmanager.VMFoundry/StartCluster", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *vMFoundryClient) StopCluster(ctx context.Context, in *ClusterID, opts ...grpc.CallOption) (*StatusResponse, error) {
	out := new(StatusResponse)
	err := c.cc.Invoke(ctx, "/vmmanager.VMFoundry/StopCluster", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *vMFoundryClient) StartVM(ctx context.Context, in *VMID, opts ...grpc.CallOption) (*StatusResponse, error) {
	out := new(StatusResponse)
	err := c.cc.Invoke(ctx, "/vmmanager.VMFoundry/StartVM", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *vMFoundryClient) StopVM(ctx context.Context, in *VMID, opts ...grpc.CallOption) (*StatusResponse, error) {
	out := new(StatusResponse)
	err := c.cc.Invoke(ctx, "/vmmanager.VMFoundry/StopVM", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *vMFoundryClient) ClusterInfo(ctx context.Context, in *ClusterID, opts ...grpc.CallOption) (*ClusterResponse, error) {
	out := new(ClusterResponse)
	err := c.cc.Invoke(ctx, "/vmmanager.VMFoundry/ClusterInfo", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *vMFoundryClient) VMInfo(ctx context.Context, in *VMID, opts ...grpc.CallOption) (*VMResponse, error) {
	out := new(VMResponse)
	err := c.cc.Invoke(ctx, "/vmmanager.VMFoundry/VMInfo", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// VMFoundryServer is the server API for VMFoundry service.
// All implementations must embed UnimplementedVMFoundryServer
// for forward compatibility
type VMFoundryServer interface {
	CreateCluster(context.Context, *ClusterRequest) (*ClusterResponse, error)
	DeleteCluster(context.Context, *ClusterID) (*StatusResponse, error)
	StartCluster(context.Context, *ClusterID) (*StatusResponse, error)
	StopCluster(context.Context, *ClusterID) (*StatusResponse, error)
	StartVM(context.Context, *VMID) (*StatusResponse, error)
	StopVM(context.Context, *VMID) (*StatusResponse, error)
	ClusterInfo(context.Context, *ClusterID) (*ClusterResponse, error)
	VMInfo(context.Context, *VMID) (*VMResponse, error)
	mustEmbedUnimplementedVMFoundryServer()
}

// UnimplementedVMFoundryServer must be embedded to have forward compatible implementations.
type UnimplementedVMFoundryServer struct {
}

func (UnimplementedVMFoundryServer) CreateCluster(context.Context, *ClusterRequest) (*ClusterResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method CreateCluster not implemented")
}
func (UnimplementedVMFoundryServer) DeleteCluster(context.Context, *ClusterID) (*StatusResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method DeleteCluster not implemented")
}
func (UnimplementedVMFoundryServer) StartCluster(context.Context, *ClusterID) (*StatusResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method StartCluster not implemented")
}
func (UnimplementedVMFoundryServer) StopCluster(context.Context, *ClusterID) (*StatusResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method StopCluster not implemented")
}
func (UnimplementedVMFoundryServer) StartVM(context.Context, *VMID) (*StatusResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method StartVM not implemented")
}
func (UnimplementedVMFoundryServer) StopVM(context.Context, *VMID) (*StatusResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method StopVM not implemented")
}
func (UnimplementedVMFoundryServer) ClusterInfo(context.Context, *ClusterID) (*ClusterResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method ClusterInfo not implemented")
}
func (UnimplementedVMFoundryServer) VMInfo(context.Context, *VMID) (*VMResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method VMInfo not implemented")
}
func (UnimplementedVMFoundryServer) mustEmbedUnimplementedVMFoundryServer() {}

// UnsafeVMFoundryServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to VMFoundryServer will
// result in compilation errors.
type UnsafeVMFoundryServer interface {
	mustEmbedUnimplementedVMFoundryServer()
}

func RegisterVMFoundryServer(s grpc.ServiceRegistrar, srv VMFoundryServer) {
	s.RegisterService(&VMFoundry_ServiceDesc, srv)
}

func _VMFoundry_CreateCluster_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ClusterRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(VMFoundryServer).CreateCluster(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/vmmanager.VMFoundry/CreateCluster",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(VMFoundryServer).CreateCluster(ctx, req.(*ClusterRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _VMFoundry_DeleteCluster_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ClusterID)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(VMFoundryServer).DeleteCluster(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/vmmanager.VMFoundry/DeleteCluster",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(VMFoundryServer).DeleteCluster(ctx, req.(*ClusterID))
	}
	return interceptor(ctx, in, info, handler)
}

func _VMFoundry_StartCluster_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ClusterID)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(VMFoundryServer).StartCluster(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/vmmanager.VMFoundry/StartCluster",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(VMFoundryServer).StartCluster(ctx, req.(*ClusterID))
	}
	return interceptor(ctx, in, info, handler)
}

func _VMFoundry_StopCluster_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ClusterID)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(VMFoundryServer).StopCluster(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/vmmanager.VMFoundry/StopCluster",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(VMFoundryServer).StopCluster(ctx, req.(*ClusterID))
	}
	return interceptor(ctx, in, info, handler)
}

func _VMFoundry_StartVM_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(VMID)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(VMFoundryServer).StartVM(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/vmmanager.VMFoundry/StartVM",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(VMFoundryServer).StartVM(ctx, req.(*VMID))
	}
	return interceptor(ctx, in, info, handler)
}

func _VMFoundry_StopVM_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(VMID)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(VMFoundryServer).StopVM(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/vmmanager.VMFoundry/StopVM",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(VMFoundryServer).StopVM(ctx, req.(*VMID))
	}
	return interceptor(ctx, in, info, handler)
}

func _VMFoundry_ClusterInfo_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ClusterID)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(VMFoundryServer).ClusterInfo(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/vmmanager.VMFoundry/ClusterInfo",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(VMFoundryServer).ClusterInfo(ctx, req.(*ClusterID))
	}
	return interceptor(ctx, in, info, handler)
}

func _VMFoundry_VMInfo_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(VMID)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(VMFoundryServer).VMInfo(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/vmmanager.VMFoundry/VMInfo",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(VMFoundryServer).VMInfo(ctx, req.(*VMID))
	}
	return interceptor(ctx, in, info, handler)
}

// VMFoundry_ServiceDesc is the grpc.ServiceDesc for VMFoundry service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var VMFoundry_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "vmmanager.VMFoundry",
	HandlerType: (*VMFoundryServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "CreateCluster",
			Handler:    _VMFoundry_CreateCluster_Handler,
		},
		{
			MethodName: "DeleteCluster",
			Handler:    _VMFoundry_DeleteCluster_Handler,
		},
		{
			MethodName: "StartCluster",
			Handler:    _VMFoundry_StartCluster_Handler,
		},
		{
			MethodName: "StopCluster",
			Handler:    _VMFoundry_StopCluster_Handler,
		},
		{
			MethodName: "StartVM",
			Handler:    _VMFoundry_StartVM_Handler,
		},
		{
			MethodName: "StopVM",
			Handler:    _VMFoundry_StopVM_Handler,
		},
		{
			MethodName: "ClusterInfo",
			Handler:    _VMFoundry_ClusterInfo_Handler,
		},
		{
			MethodName: "VMInfo",
			Handler:    _VMFoundry_VMInfo_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "vm_manager.proto",
}
